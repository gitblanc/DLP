/**
 * @generated VGen (for ANTLR) 1.7.2
 */

package ast;

import java.util.*;
import org.antlr.v4.runtime.*;

import visitor.*;

//	if:sentencia -> condicion:expresion  true:sentencia*  false:sentencia*

public class If extends AbstractSentencia {

	public If(Expresion condicion, List<Sentencia> true, List<Sentencia> false) {
		this.condicion = condicion;
		this.true = true;
		this.false = false;

       // Lo siguiente se puede borrar si no se quiere la posicion en el fichero.
       // Obtiene la linea/columna a partir de las de los hijos.
       setPositions(condicion, true, false);
	}

	public If(Object condicion, Object true, Object false) {
		this.condicion = (Expresion) getAST(condicion);
		this.true = this.<Sentencia>getAstFromContexts(true);
		this.false = this.<Sentencia>getAstFromContexts(false);

       // Lo siguiente se puede borrar si no se quiere la posicion en el fichero.
       // Obtiene la linea/columna a partir de las de los hijos.
       setPositions(condicion, true, false);
	}

	public Expresion getCondicion() {
		return condicion;
	}
	public void setCondicion(Expresion condicion) {
		this.condicion = condicion;
	}

	public List<Sentencia> getTrue() {
		return true;
	}
	public void setTrue(List<Sentencia> true) {
		this.true = true;
	}

	public List<Sentencia> getFalse() {
		return false;
	}
	public void setFalse(List<Sentencia> false) {
		this.false = false;
	}

	@Override
	public Object accept(Visitor v, Object param) { 
		return v.visit(this, param);
	}

	private Expresion condicion;
	private List<Sentencia> true;
	private List<Sentencia> false;

	public String toString() {
       return "{condicion:" + getCondicion() + ", true:" + getTrue() + ", false:" + getFalse() + "}";
   }
}
